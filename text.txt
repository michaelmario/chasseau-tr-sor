  async getData() {
            for (let key in this.products) {
                if (key === this.routerId) {
                    this.item = (this.products[key]);
                }
            }

        },
        signinUser() {
            this.$router.push({ name: 'LoginPage' })
             },
        gotoGamePage() {
            this.addToLocalStorageNewItem(this.item.title, this.item);
            this.ifAddGame = true ;
            this.recordGames();
            // this.$router.push({ name: 'GamePage' })
        },
        // get the keyName and value and  then setitem in localstorage 
        addToLocalStorageNewItem(name, value) {
            // Get the existing data
            localStorage.removeItem(name);
            this.games.push(value);
            // Save back to localStorage
            localStorage.setItem(name, JSON.stringify(this.games));

        },

        getDataStore() {
            this.keys = Object.keys(localStorage);
              var  i = this.keys.length;
            while (i--) {
                this.values.push(localStorage.getItem(this.keys[i]));
            }
        },
          getdataStorage(){
            if(this.user){
             const dataOnLine = query(collection(projectFirestore, `users/${this.user.uid}/games`), where("userId", "==", this.user.uid));
             onSnapshot(dataOnLine, (querySnapshot) => {
               this.games = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
               
            })
        }
    },
        async recordGames() {
            if (this.user.uid) {
                await addDoc(collection(projectFirestore, `users/${this.user.uid}/games`), {
                    userId: this.user.uid,
                    title:this.item.title,
                    cardId:this.item.id,
                    games: this.games,
                    timestamp: new Date()
                }).then(function () {
                    alert("Game recorder");
                });
            } else {
                alert("You need to log in first!");
            }
        }
    },
    mounted() {
        // this.getDataStore();
        //this.getdataStorage();
         this.getData();
        // console.log(this.user.uid)
      },
    watch: {
        games: {
            handler(newGames) {
                localStorage.games = JSON.stringify(newGames);
            }
        },
        deep: true
    }


    // const  = collection(, `users/${this.user.uid}/games`);
            const gamesRef = doc(projectFirestore, 'users', this.user.uid, 'games', this.cardId).get();
              
             const q = query(gamesRef);  
             console.log(q)
            // onSnapshot(gamesRef, (querySnapshot) => {
            //   this.elementData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))
            //   this.elementData.forEach((element) => {                 
            //     Object.entries(element).forEach((value) => {                    
                 
            //      console.log(value)
            //      })                  
            //   })
              
            //   
            // })
    //   try {
    //        const gameDocRef =  query(collection(, `users/${this.user.uid}/games`),where()); 
    //        const gameDoc = await getDocs(gameDocRef);
    //     if (gameDoc.exists()) {
    //       const gameData = gameDoc.data();
    //       if (gameData.cardId && gameData.cardId.includes(this.cardId)) {
    //         this.showCard = false;
    //         console.log('Card exists, hiding the card.');
    //       } else {
    //         console.log('Card does not exist, showing the card.');
    //       }
    //     } else {
    //       console.log('Game does not exist.');
    //     }
    //   } catch (error) {
    //     console.error('Error checking game and card: ', error);
    //   }